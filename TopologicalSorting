
//Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
class Solution {
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        ArrayList<Integer>al=new ArrayList<>();
        int v=adj.size();
        boolean []visited=new boolean[v];
        Stack<Integer>st=new Stack<>();
        for(int i=0;i<v;i++){
            if(!visited[i]){
            dfs(adj,visited,i,st);
            }
        }
        while(!st.isEmpty()){
             al.add(st.pop());
        }
        return al;
    }
    static void dfs(ArrayList<ArrayList<Integer>> adj,boolean[]visited,int s,Stack<Integer>st){
            visited[s]=true;
            for(int i:adj.get(s)){
                if(!visited[i]){
                    dfs(adj,visited,i,st);
                }
            }
            st.add(s);
    }
    
}
