//for directed you have a maintain diff recursion stack array to see which are visited

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
    
         boolean []visited=new boolean[V];
         boolean []rstack=new boolean[V];
         for(int i=0;i<V;i++){
              if(!visited[i]){
                   if(dfs(visited,adj,i,rstack)){
                       return true;
                   }
              }
         
         }
         return false;
    }
     public boolean dfs(boolean[] visited,ArrayList<ArrayList<Integer>> adj,int s,boolean[] rstack){
               visited[s]=true;
               rstack[s]=true;
               for(int i:adj.get(s)){
                   if(!visited[i]){
                       if(dfs(visited,adj,i,rstack))return true;
                   }
                   else if(rstack[i]){
                         return true;
                   }
               }
               rstack[s]=false;
               return false;
     }

}
